#!/bin/execlineb

#
# logmonitor [-m MODE ] [-i] FILE [FILE...]
#

# Parse options.
elgetopt "m:i"
multisubstitute
{
  importas -u -D LOG MONITORING_MODE ELGETOPT_m
  importas -u -D 0 CLEAR_RUNTIME ELGETOPT_i
}
elgetpositionals -P0
emptyenv -P

# Validate monitoring mode.
ifelse { s6-test ${MONITORING_MODE} != "LOG" -a ${MONITORING_MODE} != "STATUS" }
{
  foreground { s6-echo "Invalid monitoring mode.  Valid values are: LOG, STATUS." }
  exit 1
}

# Make sure log files exists.
if
{
  forx -o 0 FILE { $@ }
    importas -u FILE FILE
    if -t -n { s6-test -f ${FILE} }
      foreground { s6-echo "File not found: ${FILE}" }
      exit 1
}

# Initialize runtime directory.
foreground
{
  if -t { s6-test ${CLEAR_RUNTIME} -eq 1 }
    s6-rmrf /var/run/logmonitor/states
}
if { s6-mkdir -p /var/run/logmonitor/states }

define LOOP_CMD_LOG "tail -n0 -F"
define LOOP_CMD_STATUS "tailstatusfile"
backtick -n -i LOOP_CMD { s6-echo ${LOOP_CMD_${MONITORING_MODE}} $@ }
importas -u LOOP_CMD LOOP_CMD

# Start loop.
forbacktickx -d "\n\r" LINE { execlineb -c "redirfd -w 2 /dev/null ${LOOP_CMD}" }
  importas -u LINE LINE

  # Process the line.

  # For each notification definition...
  pipeline { s6-ls -0 -- /etc/logmonitor/notifications.d }
  pipeline { s6-sort -0 -- }                                                       
  forstdin -o 0 -0 -- i
    importas -u i i                                                       

    # Invoke filter.
    foreground { /etc/logmonitor/notifications.d/${i}/filter ${LINE} }                  
    importas -u ? ?
    # Handle successful match.                                                      
    if -t { s6-test ${?} -eq 0 }
      # Send notification to defined targets.
      pipeline { s6-ls -0 -- /etc/logmonitor/targets.d }
      pipeline { s6-sort -0 -- }
      forstdin -o 0 -0 -- j
        importas -u j j

        # Check if the current notification needs to be debounced.
        if
        {
          if -t { s6-test -f /var/run/logmonitor/states/${j}.${i} -a -f /etc/logmonitor/targets.d/${j}/debouncing }
            backtick -n -i DEBOUNCING { s6-head -n1 /etc/logmonitor/targets.d/${j}/debouncing }
            importas -u DEBOUNCING DEBOUNCING                                                   
            ifelse { s6-test ${DEBOUNCING} -eq 0 }
            {
              # Notification not needed.
              s6-false
            }
            # Check time since file creation.
            backtick -n -i CURRENT_TIME { date +%s }
            importas -u CURRENT_TIME CURRENT_TIME
            backtick -n -i FILE_TIME { date +%s -r /var/run/logmonitor/states/${j}.${i} }
            importas -u FILE_TIME FILE_TIME
            backtick -n -i TIME_DIFF { s6-expr ${CURRENT_TIME} - ${FILE_TIME} }
            importas -u TIME_DIFF TIME_DIFF
            # Perform notification only if time difference is enough.
            s6-test ! ${TIME_DIFF} -lt ${DEBOUNCING}
        }
        backtick -n -D "Unknown title" TITLE
        { 
          ifelse { s6-test -x /etc/logmonitor/notifications.d/${i}/title }
          { /etc/logmonitor/notifications.d/${i}/title ${LINE} }
          s6-head -n1 /etc/logmonitor/notifications.d/${i}/title
        }
        importas -u TITLE TITLE
        backtick -n -D "Unknown description" DESC
        {
          ifelse { s6-test -x /etc/logmonitor/notifications.d/${i}/desc }
          { /etc/logmonitor/notifications.d/${i}/desc ${LINE} }
          s6-head -n1 /etc/logmonitor/notifications.d/${i}/desc
        }
        importas -u DESC DESC
        backtick -n -D "ERROR" LEVEL
        {
          ifelse { s6-test -x /etc/logmonitor/notifications.d/${i}/level }
          { /etc/logmonitor/notifications.d/${i}/level ${LINE} }
          s6-head -n1 /etc/logmonitor/notifications.d/${i}/level
        }
        importas -u LEVEL LEVEL
        # Invoke notification in background.
        background { /etc/logmonitor/targets.d/${j}/send ${TITLE} ${DESC} ${LEVEL} }
        # Set indication.
        foreground { s6-rmrf /var/run/logmonitor/states/${j}.${i} }
        s6-touch /var/run/logmonitor/states/${j}.${i}
